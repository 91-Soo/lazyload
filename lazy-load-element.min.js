var LazyLoadElement=function(){"use strict";function t(t,e,o){this.init(e,o);var s=t?t.querySelectorAll("[lazy-load]:not([lazy-load-loaded])"):document.querySelectorAll("[lazy-load]:not([lazy-load-loaded])");s.length?this.addObserve(s):this.callbacks&&this.callbacks.error&&this.callbacks.error(this.stateCodes.ERRORELEMENT)}return t.prototype.init=function(t,e){this.debug=!1,this.isDisposable=null,this.observer=null,this.config={root:t&&t.root?t.root:null,rootMargin:t&&t.rootMargin?t.rootMargin:"0px",threshold:t&&t.threshold?t.threshold:.01},this.callbacks={load:null,call:null,error:null},this.stateCodes={NOTSUPPORT:{code:0,msg:"LazyLoadElement Not Support"},ERRORELEMENT:{code:1,msg:"LazyLoadElement Element Error"},LOAD:{code:2,msg:"LazyLoadElement load"},CALL:{code:3,msg:"LazyLoadElement call"}},this.callbacks={load:e?e.load:null,call:e?e.call:null,error:e?e.error:null},this.isDisposable=!t||void 0===t.isDisposable||t.isDisposable},t.prototype.addObserve=function(t){"IntersectionObserver"in window?(this.debug&&console.log("IntersectionObserver support"),this.observer=new IntersectionObserver(function(t,e){t.forEach(function(t){0<t.intersectionRatio&&this.preLoad(t,this.observer),this.callbacks&&this.callbacks.call&&this.callbacks.call(this.stateCodes.CALL,{element:t.target,isIntersecting:t.isIntersecting,intersectionRatio:t.intersectionRatio})}.bind(this))}.bind(this),this.config),[].forEach.call(t,function(t,e){setTimeout(function(){t.setAttribute("lazy-load-unloaded",""),this.observer.observe(t)}.bind(this),1)}.bind(this))):(this.debug&&console.log("IntersectionObserver not support"),this.callbacks&&this.callbacks.error&&this.callbacks.error(this.stateCodes.NOTSUPPORT),[].forEach.call(t,function(t){this.preLoad(t)}.bind(this)))},t.prototype.preLoad=function(t,e){var o=t.target;o.getAttribute("lazy-load-loaded")||([].forEach.call(o.attributes,function(e,s){if(e.nodeName.match(/data-lazy/)){var l=e.nodeName.replace(/data-lazy-/,"");"class"==l?o.classList.add(o.getAttribute(e.nodeName)):(o.onerror=function(t){o.onerror=null,o.removeAttribute("src")},o.setAttribute(l,o.getAttribute(e.nodeName))),this.callbacks&&this.callbacks.load&&this.callbacks.load(this.stateCodes.LOAD,{element:o,attr:l,isIntersecting:t.isIntersecting,intersectionRatio:t.intersectionRatio})}}.bind(this)),o.removeAttribute("lazy-load-unloaded"),o.setAttribute("lazy-load-loaded",""),e&&this.isDisposable&&e.unobserve(o))},t}();