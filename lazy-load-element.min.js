var LazyLoadElement=function(){"use strict";function t(t,e,o){this.init(e,o);var s=t?t.querySelectorAll("[lazy-load]:not([lazy-load-loaded])"):document.querySelectorAll("[lazy-load]:not([lazy-load-loaded])");s.length?this.addObserve(s):this.callbacks&&this.callbacks.error&&this.callbacks.error(this.stateCodes.ERRORELEMENT)}return t.prototype.init=function(t,e){this.debug=!1,this.config={root:t&&t.root?t.root:null,rootMargin:t&&t.rootMargin?t.rootMargin:"0px",threshold:t&&t.threshold?t.threshold:.01},this.isDisposable=!t||void 0===t.isDisposable||t.isDisposable,this.callbacks={load:e?e.load:null,call:e?e.call:null,error:e?e.error:null},this.stateCodes={NOTSUPPORT:{code:0,msg:"LazyLoadElement Not Support"},ERRORELEMENT:{code:1,msg:"LazyLoadElement Element Error"},LOAD:{code:2,msg:"LazyLoadElement load"},CALL:{code:3,msg:"LazyLoadElement call"}}},t.prototype.addObserve=function(t){"IntersectionObserver"in window?(this.debug&&console.log("IntersectionObserver support"),this.observer=new IntersectionObserver(function(t,e){t.forEach(function(t){0<t.intersectionRatio&&this.preLoad(t.target,t,this.observer),this.callbacks&&this.callbacks.call&&this.callbacks.call(this.stateCodes.CALL,{element:t.target,isIntersecting:t.isIntersecting,intersectionRatio:t.intersectionRatio})}.bind(this))}.bind(this),this.config),[].forEach.call(t,function(t,e){setTimeout(function(){t.setAttribute("lazy-load-unloaded",""),this.observer.observe(t)}.bind(this),1)}.bind(this))):(this.debug&&console.log("IntersectionObserver not support"),this.callbacks&&this.callbacks.error&&this.callbacks.error(this.stateCodes.NOTSUPPORT),[].forEach.call(t,function(t){this.preLoad(t)}.bind(this)))},t.prototype.preLoad=function(t,e,o){t.getAttribute("lazy-load-loaded")||([].forEach.call(t.attributes,function(o,s){if(o.nodeName.match(/data-lazy/)){var a=o.nodeName.replace(/data-lazy-/,"");"class"==a?t.classList.add(t.getAttribute(o.nodeName)):(t.onerror=function(e){t.onerror=null,t.removeAttribute("src")},t.setAttribute(a,t.getAttribute(o.nodeName))),this.callbacks&&this.callbacks.load&&this.callbacks.load(this.stateCodes.LOAD,{element:t,attr:a,isIntersecting:e.isIntersecting,intersectionRatio:e.intersectionRatio})}}.bind(this)),t.removeAttribute("lazy-load-unloaded"),t.setAttribute("lazy-load-loaded",""),o&&this.isDisposable&&o.unobserve(t))},t}();